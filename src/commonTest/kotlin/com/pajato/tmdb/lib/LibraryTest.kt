/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.pajato.tmdb.lib

import com.soywiz.klock.DateTime
import com.soywiz.klock.hours
import com.soywiz.klock.seconds
import kotlin.test.*

class LibraryTest {
    private fun testTmdbData(name: String) {
        val nonHomogenousCollection = "The $name collection contains inconsistent typed data!"
        val list = listOf(createDefaultFromType(name)) //fetchLines(name)
        assertTrue(list.size == 1 && list[0] !is TmdbError, "Detected an error in the $name default creation.")
        assertTrue(list.isNotEmpty(), "Incorrect number of $name!")
        when (name) {
            "Collection" -> assertTrue(list[0] is Collection, nonHomogenousCollection)
            "Keyword" -> assertTrue(list[0] is Keyword, nonHomogenousCollection)
            "Movie" -> assertTrue(list[0] is Movie, nonHomogenousCollection)
            "Network" -> assertTrue(list[0] is Network, nonHomogenousCollection)
            "Person" -> assertTrue(list[0] is Person, nonHomogenousCollection)
            "ProductionCompany" -> assertTrue(list[0] is ProductionCompany, nonHomogenousCollection)
            "TvSeries" -> assertTrue(list[0] is TvSeries, nonHomogenousCollection)
            else -> fail("Unsupported type: $name.")
        }
    }

    private fun testEmptyTmdbDataItem(item: TmdbData) {
        assertTrue(item is TmdbError, "A non-blank input did not generate an error!")
    }

    @Test fun `when the TMDB network data is accessed the count is greater than 0`() {
        testTmdbData("Network")
    }

    @Test fun `when the TMDB movie data is accessed the count is greater than 0`() {
        testTmdbData("Movie")
    }

    @Test fun `when the TMDB tv series data is accessed the count is greater than 0`() {
        testTmdbData("TvSeries")
    }

    @Test fun `when the TMDB person data is accessed the count is greater than 0`() {
        testTmdbData("Person")
    }

    @Test fun `when the TMDB production company data is accessed the count is greater than 0`() {
        testTmdbData("ProductionCompany")
    }

    @Test fun `when the TMDB collections data is accessed the count is greater than 0`() {
        testTmdbData("Collection")
    }

    @Test fun `when the TMDB keywords data is accessed the count is greater than 0`() {
        testTmdbData("Keyword")
    }

    @Test fun `when creating a collection with a blank JSON argument that an error is signalled`() {
        testEmptyTmdbDataItem(Collection.create(""))
    }

    @Test fun `when creating a keyword with a blank JSON argument that an error is signalled`() {
        testEmptyTmdbDataItem(Keyword.create(""))
    }

    @Test fun `when creating a movie with a blank JSON argument that an error is signalled`() {
        testEmptyTmdbDataItem(Movie.create(""))
    }

    @Test fun `when creating a network with a blank JSON argument that an error is signalled`() {
        testEmptyTmdbDataItem(Network.create(""))
    }

    @Test fun `when creating a person with a blank JSON argument that an error is signalled`() {
        testEmptyTmdbDataItem(Person.create(""))
    }

    @Test fun `when creating a production company with a blank JSON argument that an error is signalled`() {
        testEmptyTmdbDataItem(ProductionCompany.create(""))
    }

    @Test fun `when creating a tv series with a blank JSON argument that an error is signalled`() {
        testEmptyTmdbDataItem(TvSeries.create(""))
    }


    @Test fun `when the last export date is before 8am UTC verify previous day`() {
        val timestamp1 = DateTime.fromUnix(0L)
        val timestamp2 = timestamp1 + 8.hours + 3599.seconds
        assertEquals("12_31_1969", getLastExportDate(timestamp1), "Invalid Unix big bang date format!")
        assertEquals("12_31_1969", getLastExportDate(timestamp2), "Invalid date format!")
    }

    @Test fun `when the last export date is after 8am UTC verify same day`() {
        val timestamp = DateTime.fromUnix(60 * 60 * 1000 * 9L)
        assertEquals("01_01_1970", getLastExportDate(timestamp), "Invalid date format!")
    }

    @Test fun `when the last export date is now verify same day`() {
        val timestamp = DateTime.now()
        val formattedTimestamp = getLastExportDate(timestamp)
        val linesUrl = getLinesUrl("network_ids")
        assertTrue(linesUrl.contains(formattedTimestamp), "Invalid date format!")
    }

    @Test fun `when an invalid list name is parsed verify a correct error message`() {
        assertTrue(parse("invalidListName", "") is TmdbError)
    }

    @Test fun `when an error item is passed created verify it matches the default`() {
        val errorItem = TmdbError("A default error item.")
        assertEquals(errorItem, createFromJson("{}", errorItem), "Invalid error item creation!")
    }
}
